{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/coding/react-navigation-stack/src/views/StackView/StackViewCard.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Screen } from 'react-native-screens';\nimport createPointerEventsContainer from \"./createPointerEventsContainer\";\nvar EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'\n    };\n  } else {\n    return {};\n  }\n}\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          pointerEvents = _this$props.pointerEvents,\n          style = _this$props.style,\n          position = _this$props.position,\n          transparent = _this$props.transparent,\n          _this$props$scene = _this$props.scene,\n          index = _this$props$scene.index,\n          isActive = _this$props$scene.isActive;\n      var active = Platform.select({\n        web: isActive,\n        default: transparent || isActive ? 1 : position.interpolate({\n          inputRange: [index, index + 1 - EPS, index + 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        })\n      });\n      var animatedStyle = this.props.animatedStyle || {};\n\n      var shadowOpacity = animatedStyle.shadowOpacity,\n          overlayOpacity = animatedStyle.overlayOpacity,\n          containerAnimatedStyle = _objectWithoutProperties(animatedStyle, [\"shadowOpacity\", \"overlayOpacity\"]);\n\n      var flattenedStyle = StyleSheet.flatten(style) || {};\n\n      var backgroundColor = flattenedStyle.backgroundColor,\n          screenStyle = _objectWithoutProperties(flattenedStyle, [\"backgroundColor\"]);\n\n      return React.createElement(Screen, {\n        pointerEvents: pointerEvents,\n        onComponentRef: this.props.onComponentRef,\n        style: [containerAnimatedStyle, screenStyle],\n        active: active,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, !transparent && shadowOpacity ? React.createElement(Animated.View, {\n        style: [styles.shadow, {\n          shadowOpacity: shadowOpacity\n        }],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        }\n      }) : null, React.createElement(Animated.View, _extends({}, getAccessibilityProps(isActive), {\n        style: [transparent ? styles.transparent : styles.card, backgroundColor && backgroundColor !== 'transparent' ? {\n          backgroundColor: backgroundColor\n        } : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }), children), overlayOpacity ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.overlay, {\n          opacity: overlayOpacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        }\n      }) : null);\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: '#000'\n  }),\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: {\n      width: -1,\n      height: 1\n    },\n    shadowRadius: 5,\n    shadowColor: '#000'\n  },\n  transparent: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  }\n});\nexport default createPointerEventsContainer(Card);","map":{"version":3,"sources":["StackViewCard.tsx"],"names":["EPS","Platform","accessibilityElementsHidden","importantForAccessibility","isActive","Card","React","Component","children","pointerEvents","style","position","transparent","index","active","web","default","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","StyleSheet","backgroundColor","screenStyle","styles","getAccessibilityProps","opacity","card","flex","overlay","shadow","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor","createPointerEventsContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport createPointerEventsContainer, {\n  InputProps,\n  InjectedProps,\n} from './createPointerEventsContainer';\n\ntype Props = InputProps &\n  InjectedProps & {\n    style: StyleProp<ViewStyle>;\n    animatedStyle: any;\n    position: Animated.AnimatedInterpolation;\n    transparent?: boolean;\n    children: React.ReactNode;\n  };\n\nconst EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive: boolean) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive,\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants',\n    };\n  } else {\n    return {};\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component<Props> {\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive },\n    } = this.props;\n\n    const active: Animated.Value | number | boolean = Platform.select({\n      web: isActive,\n      // @ts-ignore\n      default:\n        transparent || isActive\n          ? 1\n          : position.interpolate({\n              inputRange: [index, index + 1 - EPS, index + 1],\n              outputRange: [1, 1, 0],\n              extrapolate: 'clamp',\n            }),\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n\n    return (\n      <Screen\n        pointerEvents={pointerEvents}\n        onComponentRef={this.props.onComponentRef}\n        style={[containerAnimatedStyle, screenStyle]}\n        // @ts-ignore\n        active={active}\n      >\n        {!transparent && shadowOpacity ? (\n          <Animated.View\n            style={[styles.shadow, { shadowOpacity }]}\n            pointerEvents=\"none\"\n          />\n        ) : null}\n        <Animated.View\n          {...getAccessibilityProps(isActive)}\n          style={[\n            transparent ? styles.transparent : styles.card,\n            backgroundColor && backgroundColor !== 'transparent'\n              ? { backgroundColor }\n              : null,\n          ]}\n        >\n          {children}\n        </Animated.View>\n        {overlayOpacity ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[styles.overlay, { opacity: overlayOpacity }]}\n          />\n        ) : null}\n      </Screen>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000',\n  },\n  transparent: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default createPointerEventsContainer(Card);\n"]},"metadata":{},"sourceType":"module"}