{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as SwitchActions from \"./SwitchActions\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport { createPathParser } from \"./pathUtils\";\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\" + initialRouteName + \"'.\" + (\"Should be one of \" + order.map(function (n) {\n      return \"\\\"\" + n + \"\\\"\";\n    }).join(', ')));\n  }\n\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    childRouters[routeName] = null;\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread({}, routeConfig.params, params);\n    } else {\n      return params;\n    }\n  }\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, config),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n\n    if (childRouter) {\n      var childAction = NavigationActions.init();\n      return _objectSpread({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName: routeName,\n        params: params\n      });\n    }\n\n    return {\n      key: routeName,\n      routeName: routeName,\n      params: params\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(nextState) {\n      if (backBehavior !== 'history') {\n        return nextState;\n      }\n\n      var nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        var keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(function (k) {\n          return k !== keyToAdd;\n        });\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        nextRouteKeyHistory.pop();\n      }\n\n      return _objectSpread({}, nextState, {\n        routeKeyHistory: nextRouteKeyHistory\n      });\n    }\n\n    var nextState = possibleNextState;\n\n    if (prevState && prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = _objectSpread({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    }\n\n    return updateNextStateHistory(nextState);\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    var initialState = {\n      routes: routes,\n      index: initialRouteIndex,\n      isTransitioning: false\n    };\n\n    if (backBehavior === 'history') {\n      var initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n\n    return initialState;\n  }\n\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _objectSpread({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        var params = action.params;\n\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _objectSpread({}, route, {\n              params: _objectSpread({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n\n      if (action.type === SwitchActions.JUMP_TO && (action.key == null || action.key === state.key)) {\n        var _params = action.params;\n\n        var _index = state.routes.findIndex(function (route) {\n          return route.routeName === action.routeName;\n        });\n\n        if (_index === -1) {\n          throw new Error(\"There is no route named '\" + action.routeName + \"' in the navigator with the key '\" + action.key + \"'.\\n\" + (\"Must be one of: \" + state.routes.map(function (route) {\n            return \"'\" + route.routeName + \"'\";\n          }).join(',')));\n        }\n\n        return getNextState(action, prevState, _objectSpread({}, state, {\n          routes: state.routes.map(function (route, i) {\n            return i === _index ? _objectSpread({}, route, {\n              params: _objectSpread({}, route.params, _params)\n            }) : route;\n          }),\n          index: _index\n        }));\n      }\n\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n\n        if (!activeChildState && inputState) {\n          return null;\n        }\n\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[state.index] = activeChildState;\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            routes: _routes\n          }));\n        }\n      }\n\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        } else if (isBackEligible && backBehavior === 'history' && state.routeKeyHistory.length > 1) {\n          var routeKey = state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        } else {\n          return state;\n        }\n      }\n\n      var didNavigate = false;\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = childState;\n\n          if (action.action && childRouter) {\n            var childStateUpdate = childRouter.getStateForAction(action.action, childState);\n\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = _objectSpread({}, newChildState, {\n              params: _objectSpread({}, newChildState.params || {}, action.params)\n            });\n          }\n\n          if (newChildState !== childState) {\n            var _routes2 = _toConsumableArray(state.routes);\n\n            _routes2[activeChildIndex] = newChildState;\n\n            var nextState = _objectSpread({}, state, {\n              routes: _routes2,\n              index: activeChildIndex\n            });\n\n            return getNextState(action, prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var _params2 = _objectSpread({}, lastRoute.params, action.params);\n\n          var _routes3 = _toConsumableArray(state.routes);\n\n          _routes3[state.routes.indexOf(lastRoute)] = _objectSpread({}, lastRoute, {\n            params: _params2\n          });\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            routes: _routes3\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, _objectSpread({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _objectSpread({}, state);\n      }\n\n      var index = state.index;\n      var routes = state.routes;\n      order.find(function (childId, i) {\n        var childRouter = childRouters[childId];\n\n        if (i === index) {\n          return false;\n        }\n\n        var childState = routes[i];\n\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n\n        if (!childState) {\n          index = i;\n          return true;\n        }\n\n        if (childState !== routes[i]) {\n          routes = _toConsumableArray(routes);\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (action.preserveFocus) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(action, prevState, _objectSpread({}, state, {\n          index: index,\n          routes: routes\n        }));\n      }\n\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \" + state.index + \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\");\n      var childRouter = childRouters[routeName];\n\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.defaultNavigationOptions)\n  };\n});","map":{"version":3,"sources":["SwitchRouter.js"],"names":["defaultActionCreators","config","validateRouteConfigMap","order","Object","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","initialRouteIndex","childRouters","screen","getScreenForRouteName","routeConfig","routeConfigs","getPathAndParamsForRoute","getActionForPathAndParams","createPathParser","initialParams","routeName","params","getParamsForRoute","childRouter","childAction","NavigationActions","key","nextRouteKeyHistory","prevState","action","keyToAdd","nextState","k","routeKeyHistory","possibleNextState","prevRouteName","nextRoutes","resetChildRoute","routes","updateNextStateHistory","initialState","index","isTransitioning","initialKey","getActionCreators","getStateForAction","inputState","state","getInitialState","activeChildIndex","route","SwitchActions","getNextState","i","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","routeKey","didNavigate","childId","childState","newChildState","childStateUpdate","lastRoute","getComponentForState","invariant","getComponentForRouteName","getPathAndParamsForState","getScreenOptions","createConfigGetter"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(nextState) {\n      if (backBehavior !== 'history') {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(k => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false,\n    };\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          route => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${\n              action.routeName\n            }' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map(route => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: state.routes.map((route, i) =>\n            i === index\n              ? {\n                  ...route,\n                  params: {\n                    ...route.params,\n                    ...params,\n                  },\n                }\n              : route\n          ),\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        } else {\n          return state;\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      let index = state.index;\n      let routes = state.routes;\n      order.find((childId, i) => {\n        const childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        let childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      if (action.preserveFocus) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(action, prevState, {\n          ...state,\n          index,\n          routes,\n        });\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}