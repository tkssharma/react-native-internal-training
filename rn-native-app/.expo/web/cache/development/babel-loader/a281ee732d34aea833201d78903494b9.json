{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/ResourceSavingScene.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled } from 'react-native-screens';\nvar FAR_FAR_AWAY = 3000;\nexport default class ResourceSavingScene extends React.Component {\n  render() {\n    if (screensEnabled && screensEnabled()) {\n      var _this$props = this.props,\n          {\n        isVisible: _isVisible\n      } = _this$props,\n          _rest = _objectWithoutProperties(_this$props, [\"isVisible\"]);\n\n      return React.createElement(Screen, _extends({\n        active: _isVisible ? 1 : 0\n      }, _rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        }\n      }));\n    }\n\n    var _this$props2 = this.props,\n        {\n      isVisible,\n      children,\n      style\n    } = _this$props2,\n        rest = _objectWithoutProperties(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n\n    return React.createElement(View, _extends({\n      style: [styles.container, style],\n      collapsable: false,\n      removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      }\n    }), React.createElement(View, {\n      style: isVisible ? styles.attached : styles.detached,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      }\n    }, children));\n  }\n\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/ResourceSavingScene.js"],"names":["React","Screen","screensEnabled","FAR_FAR_AWAY","ResourceSavingScene","Component","render","props","isVisible","rest","children","style","styles","container","Platform","OS","attached","detached","StyleSheet","create","flex","overflow","top"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAGA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,sBAAvC;AAEA,IAAMC,YAAY,GAAG,IAArB;AAEA,eAAe,MAAMC,mBAAN,SAAkCJ,KAAK,CAACK,SAAxC,CAAkD;AAC/DC,EAAAA,MAAM,GAAG;AACP,QAAIJ,cAAc,IAAIA,cAAc,EAApC,EAAwC;AACtC,wBAA+B,KAAKK,KAApC;AAAA,UAAM;AAAEC,QAAAA,SAAS,EAATA;AAAF,OAAN;AAAA,UAAsBC,KAAtB;;AACA,aAAO,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAED,UAAS,GAAG,CAAH,GAAO;AAAhC,SAAuCC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AACD,uBAAgD,KAAKF,KAArD;AAAA,QAAM;AAAEC,MAAAA,SAAF;AAAaE,MAAAA,QAAb;AAAuBC,MAAAA;AAAvB,KAAN;AAAA,QAAuCF,IAAvC;;AAEA,WAAO,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACG,MAAM,CAACC,SAAR,EAAmBF,KAAnB,CAAb;AAAwC,MAAA,WAAW,EAAE,KAArD;AAA4D,MAAA,qBAAqB,EAGxFG,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,CAACP,SAAzB,GAAqC,IAH9B;AAGoC,MAAA,aAAa,EAAEA,SAAS,GAAG,MAAH,GAAY;AAHxE,OAGoFC,IAHpF;AAAA;AAAA;AAAA;AAAA;AAAA,QAIH,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAED,SAAS,GAAGI,MAAM,CAACI,QAAV,GAAqBJ,MAAM,CAACK,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,QADH,CAJG,CAAP;AAQD;;AAhB8D;AAmBjE,IAAME,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BL,EAAAA,QAAQ,EAAE;AACRI,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BH,EAAAA,QAAQ,EAAE;AACRG,IAAAA,IAAI,EAAE,CADE;AAERE,IAAAA,GAAG,EAAEnB;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\n\nimport { Screen, screensEnabled } from 'react-native-screens';\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component {\n  render() {\n    if (screensEnabled && screensEnabled()) {\n      const { isVisible, ...rest } = this.props;\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\n    }\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return <View style={[styles.container, style]} collapsable={false} removeClippedSubviews={\n    // On iOS, set removeClippedSubviews to true only when not focused\n    // This is an workaround for a bug where the clipped view never re-appears\n    Platform.OS === 'ios' ? !isVisible : true} pointerEvents={isVisible ? 'auto' : 'none'} {...rest}>\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});"]},"metadata":{},"sourceType":"module"}