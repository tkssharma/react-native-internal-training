{"ast":null,"code":"import { isValidElementType } from 'react-is';\nimport invariant from \"../utils/invariant\";\nexport default function getScreenForRouteName(routeConfigs, routeName) {\n  var routeConfig = routeConfigs[routeName];\n\n  if (!routeConfig) {\n    throw new Error(\"There is no route defined for key \" + routeName + \".\\n\" + (\"Must be one of: \" + Object.keys(routeConfigs).map(function (a) {\n      return \"'\" + a + \"'\";\n    }).join(',')));\n  }\n\n  if (routeConfig.screen) {\n    return routeConfig.screen;\n  }\n\n  if (typeof routeConfig.getScreen === 'function') {\n    var screen = routeConfig.getScreen();\n    invariant(isValidElementType(screen), \"The getScreen defined for route '\" + routeName + \" didn't return a valid \" + 'screen or navigator.\\n\\n' + 'Please pass it like this:\\n' + (routeName + \": {\\n  getScreen: () => require('./MyScreen').default\\n}\"));\n    return screen;\n  }\n\n  return routeConfig;\n}","map":{"version":3,"sources":["getScreenForRouteName.js"],"names":["routeConfig","routeConfigs","Object","screen","invariant","isValidElementType","routeName"],"mappings":"AAAA,SAAA,kBAAA,QAAA,UAAA;AAEA,OAAA,SAAA;AAMA,eAAe,SAAA,qBAAA,CAAA,YAAA,EAAA,SAAA,EAAwD;AACrE,MAAMA,WAAW,GAAGC,YAAY,CAAhC,SAAgC,CAAhC;;AAEA,MAAI,CAAJ,WAAA,EAAkB;AAChB,UAAM,IAAA,KAAA,CACJ,uCAAA,SAAA,GAAA,KAAA,IAAA,qBACqBC,MAAM,CAANA,IAAAA,CAAAA,YAAAA,EAAAA,GAAAA,CACZ,UAAA,CAAA,EAAC;AAAA,aAAA,MAAA,CAAA,GAAA,GAAA;AADWA,KAAAA,EAAAA,IAAAA,CAFvB,GAEuBA,CADrB,CADI,CAAN;AAQF;;AAAA,MAAIF,WAAW,CAAf,MAAA,EAAwB;AACtB,WAAOA,WAAW,CAAlB,MAAA;AAGF;;AAAA,MAAI,OAAOA,WAAW,CAAlB,SAAA,KAAJ,UAAA,EAAiD;AAC/C,QAAMG,MAAM,GAAGH,WAAW,CAA1B,SAAeA,EAAf;AACAI,IAAAA,SAAS,CACPC,kBAAkB,CADX,MACW,CADX,EAEP,sCAAA,SAAA,GAAA,yBAAA,GAAA,0BAAA,GAAA,6BAAA,IAGKC,SAHL,GAFFF,0DAEE,CAFO,CAATA;AAOA,WAAA,MAAA;AAGF;;AAAA,SAAA,WAAA;AACD","sourcesContent":["import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Simple helper that gets a single screen (React component or navigator)\n * out of the navigator config.\n */\nexport default function getScreenForRouteName(routeConfigs, routeName) {\n  const routeConfig = routeConfigs[routeName];\n\n  if (!routeConfig) {\n    throw new Error(\n      `There is no route defined for key ${routeName}.\\n` +\n        `Must be one of: ${Object.keys(routeConfigs)\n          .map(a => `'${a}'`)\n          .join(',')}`\n    );\n  }\n\n  if (routeConfig.screen) {\n    return routeConfig.screen;\n  }\n\n  if (typeof routeConfig.getScreen === 'function') {\n    const screen = routeConfig.getScreen();\n    invariant(\n      isValidElementType(screen),\n      `The getScreen defined for route '${routeName} didn't return a valid ` +\n        'screen or navigator.\\n\\n' +\n        'Please pass it like this:\\n' +\n        `${routeName}: {\\n  getScreen: () => require('./MyScreen').default\\n}`\n    );\n    return screen;\n  }\n\n  return routeConfig;\n}\n"]},"metadata":{},"sourceType":"module"}