{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/@react-navigation/native/dist/withOrientation.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nexport var isOrientationLandscape = (_ref) => {\n  var {\n    width,\n    height\n  } = _ref;\n  return width > height;\n};\nexport default function (WrappedComponent) {\n  class withOrientation extends React.Component {\n    constructor() {\n      super();\n\n      this.handleOrientationChange = (_ref2) => {\n        var {\n          window\n        } = _ref2;\n        var isLandscape = isOrientationLandscape(window);\n        this.setState({\n          isLandscape\n        });\n      };\n\n      var _isLandscape = isOrientationLandscape(Dimensions.get('window'));\n\n      this.state = {\n        isLandscape: _isLandscape\n      };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, _extends({}, this.props, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        }\n      }));\n    }\n\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/@react-navigation/native/dist/withOrientation.js"],"names":["React","hoistNonReactStatic","isOrientationLandscape","width","height","WrappedComponent","withOrientation","Component","constructor","handleOrientationChange","window","isLandscape","setState","Dimensions","get","state","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","props"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,mBAAP,MAAgC,yBAAhC;AAEA,OAAO,IAAMC,sBAAsB,GAAG;AAAA,MAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD;AAAA,SAAuBD,KAAK,GAAGC,MAA/B;AAAA,CAA/B;AAEP,eAAe,UAAUC,gBAAV,EAA4B;AACzC,QAAMC,eAAN,SAA8BN,KAAK,CAACO,SAApC,CAA8C;AAC5CC,IAAAA,WAAW,GAAG;AACZ;;AADY,WAedC,uBAfc,GAeY,WAAgB;AAAA,YAAf;AAAEC,UAAAA;AAAF,SAAe;AACxC,YAAMC,WAAW,GAAGT,sBAAsB,CAACQ,MAAD,CAA1C;AACA,aAAKE,QAAL,CAAc;AAAED,UAAAA;AAAF,SAAd;AACD,OAlBa;;AAGZ,UAAMA,YAAW,GAAGT,sBAAsB,CAACW,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CAA1C;;AACA,WAAKC,KAAL,GAAa;AAAEJ,QAAAA,WAAW,EAAXA;AAAF,OAAb;AACD;;AAEDK,IAAAA,iBAAiB,GAAG;AAClBH,MAAAA,UAAU,CAACI,gBAAX,CAA4B,QAA5B,EAAsC,KAAKR,uBAA3C;AACD;;AAEDS,IAAAA,oBAAoB,GAAG;AACrBL,MAAAA,UAAU,CAACM,mBAAX,CAA+B,QAA/B,EAAyC,KAAKV,uBAA9C;AACD;;AAODW,IAAAA,MAAM,GAAG;AACP,aAAO,oBAAC,gBAAD,eAAsB,KAAKC,KAA3B,EAAsC,KAAKN,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAvB2C;;AA0B9C,SAAOd,mBAAmB,CAACK,eAAD,EAAkBD,gBAAlB,CAA1B;AACD","sourcesContent":["import React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nexport const isOrientationLandscape = ({ width, height }) => width > height;\n\nexport default function (WrappedComponent) {\n  class withOrientation extends React.Component {\n    constructor() {\n      super();\n\n      const isLandscape = isOrientationLandscape(Dimensions.get('window'));\n      this.state = { isLandscape };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}"]},"metadata":{},"sourceType":"module"}