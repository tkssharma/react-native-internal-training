{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/@react-navigation/native/dist/createKeyboardAwareNavigator.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default ((Navigator, navigatorConfig) => {\n  var _class, _temp;\n\n  return _temp = _class = class KeyboardAwareNavigator extends React.Component {\n    constructor() {\n      super(...arguments);\n      this._previouslyFocusedTextInput = null;\n\n      this._handleGestureBegin = () => {\n        this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureBegin && this.props.onGestureBegin();\n      };\n\n      this._handleGestureCanceled = () => {\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n      };\n\n      this._handleGestureEnd = () => {\n        this._previouslyFocusedTextInput = null;\n        this.props.onGestureFinish && this.props.onGestureFinish();\n      };\n\n      this._handleTransitionStart = (transitionProps, prevTransitionProps) => {\n        if (transitionProps.index !== prevTransitionProps.index) {\n          var currentField = TextInput.State.currentlyFocusedField();\n\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n\n        var onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      };\n    }\n\n    render() {\n      return React.createElement(Navigator, _extends({}, this.props, {\n        onGestureBegin: this._handleGestureBegin,\n        onGestureCanceled: this._handleGestureCanceled,\n        onGestureEnd: this._handleGestureEnd,\n        onTransitionStart: this._handleTransitionStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        }\n      }));\n    }\n\n  }, _class.router = Navigator.router, _class.navigationOptions = Navigator.navigationOptions, _temp;\n});","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/@react-navigation/native/dist/createKeyboardAwareNavigator.js"],"names":["React","Navigator","navigatorConfig","KeyboardAwareNavigator","Component","_previouslyFocusedTextInput","_handleGestureBegin","TextInput","State","currentlyFocusedField","blurTextInput","props","onGestureBegin","_handleGestureCanceled","focusTextInput","onGestureCanceled","_handleGestureEnd","onGestureFinish","_handleTransitionStart","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","render","router","navigationOptions"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,gBAAgB,CAACC,SAAD,EAAYC,eAAZ;AAAA;;AAAA,0BAAgC,MAAMC,sBAAN,SAAqCH,KAAK,CAACI,SAA3C,CAAqD;AAAA;AAAA;AAAA,WAGnGC,2BAHmG,GAGrE,IAHqE;;AAAA,WASnGC,mBATmG,GAS7E,MAAM;AAC1B,aAAKD,2BAAL,GAAmCE,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAAnC;;AACA,YAAI,KAAKJ,2BAAT,EAAsC;AACpCE,UAAAA,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8B,KAAKL,2BAAnC;AACD;;AACD,aAAKM,KAAL,CAAWC,cAAX,IAA6B,KAAKD,KAAL,CAAWC,cAAX,EAA7B;AACD,OAfkG;;AAAA,WAiBnGC,sBAjBmG,GAiB1E,MAAM;AAC7B,YAAI,KAAKR,2BAAT,EAAsC;AACpCE,UAAAA,SAAS,CAACC,KAAV,CAAgBM,cAAhB,CAA+B,KAAKT,2BAApC;AACD;;AACD,aAAKM,KAAL,CAAWI,iBAAX,IAAgC,KAAKJ,KAAL,CAAWI,iBAAX,EAAhC;AACD,OAtBkG;;AAAA,WAwBnGC,iBAxBmG,GAwB/E,MAAM;AACxB,aAAKX,2BAAL,GAAmC,IAAnC;AACA,aAAKM,KAAL,CAAWM,eAAX,IAA8B,KAAKN,KAAL,CAAWM,eAAX,EAA9B;AACD,OA3BkG;;AAAA,WA6BnGC,sBA7BmG,GA6B1E,CAACC,eAAD,EAAkBC,mBAAlB,KAA0C;AAIjE,YAAID,eAAe,CAACE,KAAhB,KAA0BD,mBAAmB,CAACC,KAAlD,EAAyD;AACvD,cAAMC,YAAY,GAAGf,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAArB;;AACA,cAAIa,YAAJ,EAAkB;AAChBf,YAAAA,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8BY,YAA9B;AACD;AACF;;AAED,YAAMC,iBAAiB,GAAG,KAAKZ,KAAL,CAAWY,iBAAX,IAAgCrB,eAAe,CAACqB,iBAA1E;AACAA,QAAAA,iBAAiB,IAAIA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CAAtC;AACD,OA1CkG;AAAA;;AAKnGI,IAAAA,MAAM,GAAG;AACP,aAAO,oBAAC,SAAD,eAAe,KAAKb,KAApB;AAA2B,QAAA,cAAc,EAAE,KAAKL,mBAAhD;AAAqE,QAAA,iBAAiB,EAAE,KAAKO,sBAA7F;AAAqH,QAAA,YAAY,EAAE,KAAKG,iBAAxI;AAA2J,QAAA,iBAAiB,EAAE,KAAKE,sBAAnL;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAPkG,GAArF,SACPO,MADO,GACExB,SAAS,CAACwB,MADZ,SAEPC,iBAFO,GAEazB,SAAS,CAACyB,iBAFvB;AAAA,CAAhB","sourcesContent":["import React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default ((Navigator, navigatorConfig) => class KeyboardAwareNavigator extends React.Component {\n  static router = Navigator.router;\n  static navigationOptions = Navigator.navigationOptions;\n  _previouslyFocusedTextInput = null;\n\n  render() {\n    return <Navigator {...this.props} onGestureBegin={this._handleGestureBegin} onGestureCanceled={this._handleGestureCanceled} onGestureEnd={this._handleGestureEnd} onTransitionStart={this._handleTransitionStart} />;\n  }\n\n  _handleGestureBegin = () => {\n    this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n    if (this._previouslyFocusedTextInput) {\n      TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n    }\n    this.props.onGestureBegin && this.props.onGestureBegin();\n  };\n\n  _handleGestureCanceled = () => {\n    if (this._previouslyFocusedTextInput) {\n      TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n    }\n    this.props.onGestureCanceled && this.props.onGestureCanceled();\n  };\n\n  _handleGestureEnd = () => {\n    this._previouslyFocusedTextInput = null;\n    this.props.onGestureFinish && this.props.onGestureFinish();\n  };\n\n  _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n    // TODO: We should not even have received the transition start event\n    // in the case where the index did not change, I believe. We\n    // should revisit this after 2.0 release.\n    if (transitionProps.index !== prevTransitionProps.index) {\n      const currentField = TextInput.State.currentlyFocusedField();\n      if (currentField) {\n        TextInput.State.blurTextInput(currentField);\n      }\n    }\n\n    const onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n    onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n  };\n});"]},"metadata":{},"sourceType":"module"}