{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/TouchableItem.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nexport default class TouchableItem extends React.Component {\n  render() {\n    if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n      var _this$props = this.props,\n          {\n        style\n      } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"style\"]);\n\n      return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n        style: null,\n        background: TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        }\n      }), React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        }\n      }, React.Children.only(this.props.children)));\n    }\n\n    return React.createElement(TouchableOpacity, _extends({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      }\n    }), this.props.children);\n  }\n\n}\nTouchableItem.defaultProps = {\n  borderless: false,\n  pressColor: 'rgba(0, 0, 0, .32)'\n};","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/TouchableItem.js"],"names":["React","ANDROID_VERSION_LOLLIPOP","TouchableItem","Component","render","Platform","OS","Version","props","style","rest","TouchableNativeFeedback","Ripple","pressColor","borderless","Children","only","children","defaultProps"],"mappings":";;;;;;;;AASA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAGA,IAAMC,wBAAwB,GAAG,EAAjC;AAEA,eAAe,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAMzDC,EAAAA,MAAM,GAAG;AASP,QAAIC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoBN,wBAArD,EAA+E;AAC7E,wBAA2B,KAAKO,KAAhC;AAAA,UAAM;AAAEC,QAAAA;AAAF,OAAN;AAAA,UAAkBC,IAAlB;;AACA,aAAO,oBAAC,uBAAD,eAA6BA,IAA7B;AAAmC,QAAA,KAAK,EAAE,IAA1C;AAAgD,QAAA,UAAU,EAAEC,uBAAuB,CAACC,MAAxB,CAA+B,KAAKJ,KAAL,CAAWK,UAA1C,EAAsD,KAAKL,KAAL,CAAWM,UAAjE,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA,UACH,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBT,KAAK,CAACe,QAAN,CAAeC,IAAf,CAAoB,KAAKR,KAAL,CAAWS,QAA/B,CAArB,CADG,CAAP;AAGD;;AAED,WAAO,oBAAC,gBAAD,eAAsB,KAAKT,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmC,KAAKA,KAAL,CAAWS,QAA9C,CAAP;AACD;;AAvBwD;AAAtCf,a,CACZgB,Y,GAAe;AACpBJ,EAAAA,UAAU,EAAE,KADQ;AAEpBD,EAAAA,UAAU,EAAE;AAFQ,C","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport React from 'react';\nimport { Platform, TouchableNativeFeedback, TouchableOpacity, View } from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)'\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n      const { style, ...rest } = this.props;\n      return <TouchableNativeFeedback {...rest} style={null} background={TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)}>\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>;\n    }\n\n    return <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>;\n  }\n}"]},"metadata":{},"sourceType":"module"}