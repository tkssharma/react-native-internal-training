{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-tabs/src/utils/createTabNavigator.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, NavigationActions } from '@react-navigation/core';\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      this._renderScene = (_ref) => {\n        var {\n          route\n        } = _ref;\n        var {\n          screenProps,\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          }\n        });\n      };\n\n      this._renderIcon = (_ref2) => {\n        var {\n          route,\n          focused = true,\n          tintColor,\n          horizontal = false\n        } = _ref2;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused,\n            tintColor,\n            horizontal\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      };\n\n      this._getButtonComponent = (_ref3) => {\n        var {\n          route\n        } = _ref3;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarButtonComponent) {\n          return options.tabBarButtonComponent;\n        }\n\n        return null;\n      };\n\n      this._getLabelText = (_ref4) => {\n        var {\n          route\n        } = _ref4;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      };\n\n      this._getAccessibilityLabel = (_ref5) => {\n        var {\n          route\n        } = _ref5;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = this._getLabelText({\n          route\n        });\n\n        if (typeof label === 'string') {\n          var {\n            routes\n          } = this.props.navigation.state;\n          return \"\".concat(label, \", tab, \").concat(routes.indexOf(route) + 1, \" of \").concat(routes.length);\n        }\n      };\n\n      this._getTestID = (_ref6) => {\n        var {\n          route\n        } = _ref6;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      };\n\n      this._makeDefaultHandler = (_ref7) => {\n        var {\n          route,\n          navigation\n        } = _ref7;\n        return () => {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            this._jumpTo(route.routeName);\n          }\n        };\n      };\n\n      this._handleTabPress = (_ref8) => {\n        var {\n          route\n        } = _ref8;\n        this._isTabPress = true;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var {\n          navigation,\n          options\n        } = descriptor;\n\n        var defaultHandler = this._makeDefaultHandler({\n          route,\n          navigation\n        });\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation,\n            defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      this._handleTabLongPress = (_ref9) => {\n        var {\n          route\n        } = _ref9;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var {\n          navigation,\n          options\n        } = descriptor;\n\n        var defaultHandler = this._makeDefaultHandler({\n          route,\n          navigation\n        });\n\n        if (options.tabBarOnLongPress) {\n          options.tabBarOnLongPress({\n            navigation,\n            defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      this._handleIndexChange = index => {\n        if (this._isTabPress) {\n          this._isTabPress = false;\n          return;\n        }\n\n        this._jumpTo(this.props.navigation.state.routes[index].routeName);\n      };\n\n      this._handleSwipeStart = () => {\n        this.setState({\n          isSwiping: true\n        });\n      };\n\n      this._handleSwipeEnd = () => {\n        this.setState({\n          isSwiping: false\n        });\n      };\n\n      this._jumpTo = routeName => this.props.navigation.dispatch(NavigationActions.navigate({\n        routeName\n      }));\n\n      this._isTabPress = false;\n    }\n\n    render() {\n      var {\n        descriptors,\n        navigation,\n        screenProps\n      } = this.props;\n      var {\n        state\n      } = navigation;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n\n      var options = _objectSpread({}, this.props.navigationConfig, {}, descriptor.options);\n\n      return React.createElement(TabView, _extends({}, options, {\n        getLabelText: this._getLabelText,\n        getButtonComponent: this._getButtonComponent,\n        getAccessibilityLabel: this._getAccessibilityLabel,\n        getTestID: this._getTestID,\n        renderIcon: this._renderIcon,\n        renderScene: this._renderScene,\n        onIndexChange: this._handleIndexChange,\n        onTabPress: this._handleTabPress,\n        onTabLongPress: this._handleTabLongPress,\n        navigation: navigation,\n        descriptors: descriptors,\n        screenProps: screenProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        }\n      }));\n    }\n\n  }\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-tabs/src/utils/createTabNavigator.js"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","NavigationActions","createTabNavigator","TabView","NavigationView","Component","_renderScene","route","screenProps","descriptors","props","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","horizontal","options","tabBarIcon","_getButtonComponent","tabBarButtonComponent","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","routes","state","indexOf","length","_getTestID","tabBarTestID","_makeDefaultHandler","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_handleTabPress","_isTabPress","defaultHandler","tabBarOnPress","_handleTabLongPress","tabBarOnLongPress","_handleIndexChange","_handleSwipeStart","setState","isSwiping","_handleSwipeEnd","navigate","render","navigationConfig","config","router"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  NavigationActions,\n} from '@react-navigation/core';\n\nexport type InjectedProps = {\n  getLabelText: (props: { route: any }) => any,\n  getAccessibilityLabel: (props: { route: any }) => string,\n  getTestID: (props: { route: any }) => string,\n  getButtonComponent: (props: { route: any }) => ?React.Component<*>,\n  renderIcon: (props: {\n    route: any,\n    focused: boolean,\n    tintColor: string,\n    horizontal: boolean,\n  }) => React.Node,\n  renderScene: (props: { route: any }) => ?React.Node,\n  onIndexChange: (index: number) => any,\n  onTabPress: (props: { route: any }) => mixed,\n  onTabLongPress: (props: { route: any }) => mixed,\n  navigation: any,\n  descriptors: any,\n  screenProps?: any,\n};\n\nexport default function createTabNavigator(TabView: React.ComponentType<*>) {\n  class NavigationView extends React.Component<*, *> {\n    _renderScene = ({ route }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused = true,\n      tintColor,\n      horizontal = false,\n    }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getButtonComponent = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n    };\n\n    _getTestID = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({ route, navigation }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }) => {\n      this._isTabPress = true;\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = index => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _handleSwipeStart = () => {\n      this.setState({ isSwiping: true });\n    };\n\n    _handleSwipeEnd = () => {\n      this.setState({ isSwiping: false });\n    };\n\n    _jumpTo = routeName =>\n      this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const { descriptors, navigation, screenProps } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...this.props.navigationConfig,\n        ...descriptor.options,\n      };\n\n      return (\n        <TabView\n          {...options}\n          getLabelText={this._getLabelText}\n          getButtonComponent={this._getButtonComponent}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (routes: *, config: * = {}) => {\n    const router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}