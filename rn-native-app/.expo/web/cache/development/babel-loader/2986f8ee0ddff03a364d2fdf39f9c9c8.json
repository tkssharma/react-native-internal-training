{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/navigators/createDrawerNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { createNavigator } from '@react-navigation/core';\nimport { SafeAreaView } from '@react-navigation/native';\nimport DrawerRouter from \"../routers/DrawerRouter\";\nimport DrawerView from \"../views/DrawerView\";\nimport DrawerItems from \"../views/DrawerNavigatorItems\";\n\nvar defaultContentComponent = props => React.createElement(ScrollView, {\n  alwaysBounceVertical: false,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  }\n}, React.createElement(SafeAreaView, {\n  forceInset: {\n    top: 'always',\n    horizontal: 'never'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  }\n}, React.createElement(DrawerItems, _extends({}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  }\n}))));\n\nvar DefaultDrawerConfig = {\n  drawerWidth: () => {\n    var {\n      height,\n      width\n    } = Dimensions.get('window');\n    var smallerAxisSize = Math.min(height, width);\n    var isLandscape = width > height;\n    var isTablet = smallerAxisSize >= 600;\n    var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    var maxWidth = isTablet ? 320 : 280;\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: 'white',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide',\n  overlayColor: 'black'\n};\n\nvar DrawerNavigator = function DrawerNavigator(routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var mergedConfig = _objectSpread({}, DefaultDrawerConfig, {}, config);\n\n  var drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n  var navigator = createNavigator(DrawerView, drawerRouter, mergedConfig);\n  return navigator;\n};\n\nexport default DrawerNavigator;","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/navigators/createDrawerNavigator.js"],"names":["React","createNavigator","SafeAreaView","DrawerRouter","DrawerView","DrawerItems","defaultContentComponent","props","top","horizontal","DefaultDrawerConfig","drawerWidth","height","width","Dimensions","get","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","contentComponent","drawerPosition","keyboardDismissMode","drawerBackgroundColor","useNativeAnimations","drawerType","hideStatusBar","statusBarAnimation","overlayColor","DrawerNavigator","routeConfigs","config","mergedConfig","drawerRouter","navigator"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,YAAP;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;;AAMA,IAAMC,uBAAuB,GAAGC,KAAK,IAAI,oBAAC,UAAD;AAAY,EAAA,oBAAoB,EAAE,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,GACrC,oBAAC,YAAD;AAAc,EAAA,UAAU,EAAE;AAAEC,IAAAA,GAAG,EAAE,QAAP;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,WAAD,eAAiBF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,GADF,CADqC,CAAzC;;AAMA,IAAMG,mBAAmB,GAAG;AAC1BC,EAAAA,WAAW,EAAE,MAAM;AAMjB,QAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAoBC,UAAU,CAACC,GAAX,CAAe,QAAf,CAA1B;AACA,QAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASN,MAAT,EAAiBC,KAAjB,CAAxB;AACA,QAAMM,WAAW,GAAGN,KAAK,GAAGD,MAA5B;AACA,QAAMQ,QAAQ,GAAGJ,eAAe,IAAI,GAApC;AACA,QAAMK,YAAY,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBJ,WAAW,GAAG,EAAH,GAAQ,EAA3C,GAAgD,EAArE;AACA,QAAMK,QAAQ,GAAGJ,QAAQ,GAAG,GAAH,GAAS,GAAlC;AAEA,WAAOH,IAAI,CAACC,GAAL,CAASF,eAAe,GAAGK,YAA3B,EAAyCG,QAAzC,CAAP;AACD,GAfyB;AAgB1BC,EAAAA,gBAAgB,EAAEnB,uBAhBQ;AAiB1BoB,EAAAA,cAAc,EAAE,MAjBU;AAkB1BC,EAAAA,mBAAmB,EAAE,SAlBK;AAmB1BC,EAAAA,qBAAqB,EAAE,OAnBG;AAoB1BC,EAAAA,mBAAmB,EAAE,IApBK;AAqB1BC,EAAAA,UAAU,EAAE,OArBc;AAsB1BC,EAAAA,aAAa,EAAE,KAtBW;AAuB1BC,EAAAA,kBAAkB,EAAE,OAvBM;AAwB1BC,EAAAA,YAAY,EAAE;AAxBY,CAA5B;;AA2BA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,YAAD,EAA+B;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;;AACrD,MAAMC,YAAY,qBAAQ3B,mBAAR,MAAgC0B,MAAhC,CAAlB;;AACA,MAAME,YAAY,GAAGnC,YAAY,CAACgC,YAAD,EAAeE,YAAf,CAAjC;AACA,MAAME,SAAS,GAAGtC,eAAe,CAACG,UAAD,EAAakC,YAAb,EAA2BD,YAA3B,CAAjC;AACA,SAAOE,SAAP;AACD,CALD;;AAOA,eAAeL,eAAf","sourcesContent":["import React from 'react';\nimport { Dimensions, Platform, ScrollView } from 'react-native';\nimport { createNavigator } from '@react-navigation/core';\nimport { SafeAreaView } from '@react-navigation/native';\nimport DrawerRouter from '../routers/DrawerRouter';\nimport DrawerView from '../views/DrawerView';\nimport DrawerItems from '../views/DrawerNavigatorItems';\n\n// A stack navigators props are the intersection between\n// the base navigator props (navgiation, screenProps, etc)\n// and the view's props\n\nconst defaultContentComponent = props => <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>;\n\nconst DefaultDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: 'white',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide',\n  overlayColor: 'black'\n};\n\nconst DrawerNavigator = (routeConfigs, config = {}) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n  const drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n  const navigator = createNavigator(DrawerView, drawerRouter, mergedConfig);\n  return navigator;\n};\n\nexport default DrawerNavigator;"]},"metadata":{},"sourceType":"module"}