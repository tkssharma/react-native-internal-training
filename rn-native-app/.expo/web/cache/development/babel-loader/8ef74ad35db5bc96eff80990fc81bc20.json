{"ast":null,"code":"var validateFormat = function validateFormat() {};\n\nif (process.env !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","map":{"version":3,"sources":["invariant.js"],"names":["validateFormat","process","format","error","args","argIndex","module"],"mappings":"AAaA,IAAIA,cAAc,GAAG,SAAA,cAAA,GAAW,CAAhC,CAAA;;AAEA,IAAIC,OAAO,CAAPA,GAAAA,KAAJ,YAAA,EAAkC;AAChCD,EAAAA,cAAc,GAAG,SAAA,cAAA,CAAA,MAAA,EAAiB;AAChC,QAAIE,MAAM,KAAV,SAAA,EAA0B;AACxB,YAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;AAEH;AAJDF,GAAAA;AAOF;;AAAA,SAAA,SAAA,CAAA,SAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAwD;AACtDA,EAAAA,cAAc,CAAdA,MAAc,CAAdA;;AAEA,MAAI,CAAJ,SAAA,EAAgB;AACd,QAAA,KAAA;;AACA,QAAIE,MAAM,KAAV,SAAA,EAA0B;AACxBC,MAAAA,KAAK,GAAG,IAAA,KAAA,CAARA,+HAAQ,CAARA;AADF,KAAA,MAIO;AACL,UAAIC,IAAI,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAX,CAAW,CAAX;AACA,UAAIC,QAAQ,GAAZ,CAAA;AACAF,MAAAA,KAAK,GAAG,IAAA,KAAA,CACND,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAsB,YAAW;AAC/B,eAAOE,IAAI,CAACC,QAAZ,EAAW,CAAX;AAFJF,OACED,CADM,CAARC;AAKAA,MAAAA,KAAK,CAALA,IAAAA,GAAAA,qBAAAA;AAGFA;;AAAAA,IAAAA,KAAK,CAALA,WAAAA,GAAAA,CAAAA;AACA,UAAA,KAAA;AAEH;AAEDG;;AAAAA,MAAM,CAANA,OAAAA,GAAAA,SAAAA","sourcesContent":["/* eslint-disable import/no-commonjs */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function() {};\n\nif (process.env !== 'production') {\n  validateFormat = function(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n"]},"metadata":{},"sourceType":"script"}