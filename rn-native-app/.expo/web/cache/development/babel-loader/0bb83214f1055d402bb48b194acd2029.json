{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = (_ref) => {\n  var {\n    items,\n    activeItemKey,\n    activeTintColor,\n    activeBackgroundColor,\n    inactiveTintColor,\n    inactiveBackgroundColor,\n    getLabel,\n    renderIcon,\n    onItemPress,\n    itemsContainerStyle,\n    itemStyle,\n    labelStyle,\n    activeLabelStyle,\n    inactiveLabelStyle,\n    iconContainerStyle,\n    drawerPosition\n  } = _ref;\n  return React.createElement(View, {\n    style: [styles.container, itemsContainerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    }\n  }, items.map((route, index) => {\n    var focused = activeItemKey === route.key;\n    var color = focused ? activeTintColor : inactiveTintColor;\n    var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    var scene = {\n      route,\n      index,\n      focused,\n      tintColor: color\n    };\n    var icon = renderIcon(scene);\n    var label = getLabel(scene);\n    var accessibilityLabel = typeof label === 'string' ? label : undefined;\n    var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return React.createElement(TouchableItem, {\n      key: route.key,\n      accessible: true,\n      accessibilityLabel: accessibilityLabel,\n      onPress: () => {\n        onItemPress({\n          route,\n          focused\n        });\n      },\n      delayPressIn: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      }\n    }, React.createElement(SafeAreaView, {\n      style: [{\n        backgroundColor\n      }, styles.item, itemStyle],\n      forceInset: {\n        [drawerPosition]: 'always',\n        [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n        vertical: 'never'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      }\n    }, icon ? React.createElement(View, {\n      style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      }\n    }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n      style: [styles.label, {\n        color\n      }, labelStyle, extraLabelStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      }\n    }, label) : label));\n  }));\n};\n\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js"],"names":["React","SafeAreaView","TouchableItem","DrawerNavigatorItems","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","item","vertical","inactiveIcon","defaultProps","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from './TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition\n}) => <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index) => {\n    const focused = activeItemKey === route.key;\n    const color = focused ? activeTintColor : inactiveTintColor;\n    const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    const scene = { route, index, focused, tintColor: color };\n    const icon = renderIcon(scene);\n    const label = getLabel(scene);\n    const accessibilityLabel = typeof label === 'string' ? label : undefined;\n    const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return <TouchableItem key={route.key} accessible accessibilityLabel={accessibilityLabel} onPress={() => {\n      onItemPress({ route, focused });\n    }} delayPressIn={0}>\n          <SafeAreaView style={[{ backgroundColor }, styles.item, itemStyle]} forceInset={{\n        [drawerPosition]: 'always',\n        [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n        vertical: 'never'\n      }}>\n            {icon ? <View style={[styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]}>\n                {icon}\n              </View> : null}\n            {typeof label === 'string' ? <Text style={[styles.label, { color }, labelStyle, extraLabelStyle]}>\n                {label}\n              </Text> : label}\n          </SafeAreaView>\n        </TouchableItem>;\n  })}\n  </View>;\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\n\nexport default DrawerNavigatorItems;"]},"metadata":{},"sourceType":"module"}