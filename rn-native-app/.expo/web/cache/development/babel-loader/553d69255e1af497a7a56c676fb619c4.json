{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/@react-navigation/native/dist/Scrollables.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from \"./createNavigationAwareScrollable\";\nimport invariant from \"./utils/invariant\";\nvar WrappedScrollView;\n\nif (Platform.OS === 'android') {\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  var onRefresh = props.onRefresh;\n\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return _objectSpread({}, props, {\n      refreshControl: props.refreshControl == null ? React.createElement(RefreshControl, {\n        refreshing: props.refreshing,\n        onRefresh: onRefresh,\n        progressViewOffset: props.progressViewOffset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        }\n      }) : props.refreshControl\n    });\n  } else {\n    return props;\n  }\n}\n\nvar WrappedFlatList = React.forwardRef((props, ref) => React.createElement(FlatList, _extends({\n  ref: ref\n}, props, {\n  renderScrollComponent: props => React.createElement(WrappedScrollView, _extends({}, propsMaybeWithRefreshControl(props), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    }\n  })),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  }\n})));\nvar WrappedSectionList = React.forwardRef((props, ref) => React.createElement(SectionList, _extends({\n  ref: ref\n}, props, {\n  renderScrollComponent: props => React.createElement(WrappedScrollView, _extends({}, propsMaybeWithRefreshControl(props), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    }\n  })),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  }\n})));\nmodule.exports = {\n  ScrollView: WrappedScrollView,\n  FlatList: WrappedFlatList,\n  SectionList: WrappedSectionList\n};","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/@react-navigation/native/dist/Scrollables.js"],"names":["React","ScrollView","GHScrollView","createNavigationAwareScrollable","invariant","WrappedScrollView","Platform","OS","propsMaybeWithRefreshControl","props","onRefresh","refreshing","JSON","stringify","refreshControl","progressViewOffset","WrappedFlatList","forwardRef","ref","WrappedSectionList","module","exports","FlatList","SectionList"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAEA,SAASC,UAAU,IAAIC,YAAvB,QAA2C,8BAA3C;AACA,OAAOC,+BAAP;AACA,OAAOC,SAAP;AAEA,IAAIC,iBAAJ;;AACA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAI7BF,EAAAA,iBAAiB,GAAGF,+BAA+B,CAACF,UAAD,CAAnD;AACD,CALD,MAKO;AACLI,EAAAA,iBAAiB,GAAGF,+BAA+B,CAACD,YAAD,CAAnD;AACD;;AAED,SAASM,4BAAT,CAAsCC,KAAtC,EAA6C;AAC3C,MAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;;AACA,MAAIA,SAAJ,EAAe;AACbN,IAAAA,SAAS,CAAC,OAAOK,KAAK,CAACE,UAAb,KAA4B,SAA7B,EAAwC,sFAAsFC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACE,UAArB,CAAtF,GAAyH,GAAjK,CAAT;AACA,6BACKF,KADL;AAEEK,MAAAA,cAAc,EAAEL,KAAK,CAACK,cAAN,IAAwB,IAAxB,GAA+B,oBAAC,cAAD;AAAgB,QAAA,UAAU,EAAEL,KAAK,CAACE,UAAlC;AAA8C,QAAA,SAAS,EAAED,SAAzD;AAAoE,QAAA,kBAAkB,EAAED,KAAK,CAACM,kBAA9F;AAAA;AAAA;AAAA;AAAA;AAAA,QAA/B,GAAsJN,KAAK,CAACK;AAF9K;AAID,GAND,MAMO;AACL,WAAOL,KAAP;AACD;AACF;;AAED,IAAMO,eAAe,GAAGhB,KAAK,CAACiB,UAAN,CAAiB,CAACR,KAAD,EAAQS,GAAR,KAAgB,oBAAC,QAAD;AAAU,EAAA,GAAG,EAAEA;AAAf,GAAwBT,KAAxB;AAA+B,EAAA,qBAAqB,EAAEA,KAAK,IAAI,oBAAC,iBAAD,eAAuBD,4BAA4B,CAACC,KAAD,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC,CAAxB;AAEA,IAAMU,kBAAkB,GAAGnB,KAAK,CAACiB,UAAN,CAAiB,CAACR,KAAD,EAAQS,GAAR,KAAgB,oBAAC,WAAD;AAAa,EAAA,GAAG,EAAEA;AAAlB,GAA2BT,KAA3B;AAAkC,EAAA,qBAAqB,EAAEA,KAAK,IAAI,oBAAC,iBAAD,eAAuBD,4BAA4B,CAACC,KAAD,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC,CAA3B;AAGAW,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,UAAU,EAAEI,iBADG;AAEfiB,EAAAA,QAAQ,EAAEN,eAFK;AAGfO,EAAAA,WAAW,EAAEJ;AAHE,CAAjB","sourcesContent":["import React from 'react';\nimport { ScrollView, Platform, FlatList, SectionList, RefreshControl } from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return {\n      ...props,\n      refreshControl: props.refreshControl == null ? <RefreshControl refreshing={props.refreshing} onRefresh={onRefresh} progressViewOffset={props.progressViewOffset} /> : props.refreshControl\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => <FlatList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\nconst WrappedSectionList = React.forwardRef((props, ref) => <SectionList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = {\n  ScrollView: WrappedScrollView,\n  FlatList: WrappedFlatList,\n  SectionList: WrappedSectionList\n};"]},"metadata":{},"sourceType":"module"}