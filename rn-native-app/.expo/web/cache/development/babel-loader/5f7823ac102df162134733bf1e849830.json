{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/DrawerView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\nimport DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\nexport default class DrawerView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loaded: [this.props.navigation.state.index],\n      drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n    };\n    this.drawerGestureRef = React.createRef();\n\n    this._handleDrawerStateChange = (newState, willShow) => {\n      if (newState === 'Idle') {\n        if (!this.props.navigation.state.isDrawerIdle) {\n          this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_IDLE,\n            key: this.props.navigation.state.key\n          });\n        }\n      } else if (newState === 'Settling') {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_SETTLING,\n          key: this.props.navigation.state.key,\n          willShow\n        });\n      } else {\n        if (this.props.navigation.state.isDrawerIdle) {\n          this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_ACTIVE,\n            key: this.props.navigation.state.key\n          });\n        }\n      }\n    };\n\n    this._handleDrawerOpen = () => {\n      this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_OPENED,\n        key: this.props.navigation.state.key\n      });\n    };\n\n    this._handleDrawerClose = () => {\n      this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_CLOSED,\n        key: this.props.navigation.state.key\n      });\n    };\n\n    this._updateWidth = () => {\n      var drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n      if (this.state.drawerWidth !== drawerWidth) {\n        this.setState({\n          drawerWidth\n        });\n      }\n    };\n\n    this._renderNavigationView = drawerOpenProgress => {\n      return React.createElement(DrawerGestureContext.Provider, {\n        value: this.drawerGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, React.createElement(DrawerSidebar, _extends({\n        screenProps: this.props.screenProps,\n        drawerOpenProgress: drawerOpenProgress,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        contentComponent: this.props.navigationConfig.contentComponent,\n        contentOptions: this.props.navigationConfig.contentOptions,\n        drawerPosition: this.props.navigationConfig.drawerPosition,\n        style: this.props.navigationConfig.style\n      }, this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      })));\n    };\n\n    this._renderContent = () => {\n      var {\n        lazy,\n        navigation\n      } = this.props;\n      var {\n        loaded\n      } = this.state;\n      var {\n        routes\n      } = navigation.state;\n\n      if (this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = this.props.descriptors[activeKey];\n        return React.createElement(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: this.props.screenProps,\n          component: descriptor.getComponent(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          }\n        });\n      } else {\n        return React.createElement(ScreenContainer, {\n          style: styles.pages,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        }, routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n\n          var isFocused = navigation.state.index === index;\n          var descriptor = this.props.descriptors[route.key];\n          return React.createElement(ResourceSavingScene, {\n            key: route.key,\n            style: [StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            }\n          }, React.createElement(SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: this.props.screenProps,\n            component: descriptor.getComponent(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            }\n          }));\n        }));\n      }\n    };\n\n    this._setDrawerGestureRef = ref => {\n      this.drawerGestureRef.current = ref;\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      index\n    } = nextProps.navigation.state;\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    var {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    var {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n    var prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    var changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  render() {\n    var {\n      navigation\n    } = this.props;\n    var activeKey = navigation.state.routes[navigation.state.index].key;\n    var {\n      drawerLockMode\n    } = this.props.descriptors[activeKey].options;\n    return React.createElement(DrawerLayout, {\n      ref: c => {\n        this._drawer = c;\n      },\n      onGestureRef: this._setDrawerGestureRef,\n      drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n      drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,\n      keyboardDismissMode: this.props.navigationConfig.keyboardDismissMode,\n      drawerWidth: this.state.drawerWidth,\n      onDrawerOpen: this._handleDrawerOpen,\n      onDrawerClose: this._handleDrawerClose,\n      onDrawerStateChanged: this._handleDrawerStateChange,\n      useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n      renderNavigationView: this._renderNavigationView,\n      drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n      drawerType: this.props.navigationConfig.drawerType,\n      edgeWidth: this.props.navigationConfig.edgeWidth,\n      hideStatusBar: this.props.navigationConfig.hideStatusBar,\n      statusBarAnimation: this.props.navigationConfig.statusBarAnimation,\n      minSwipeDistance: this.props.navigationConfig.minSwipeDistance,\n      overlayColor: this.props.navigationConfig.overlayColor,\n      drawerContainerStyle: this.props.navigationConfig.drawerContainerStyle,\n      contentContainerStyle: this.props.navigationConfig.contentContainerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      }\n    }, React.createElement(DrawerGestureContext.Provider, {\n      value: this.drawerGestureRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      }\n    }, this._renderContent()));\n  }\n\n}\nDrawerView.defaultProps = {\n  lazy: true\n};\nvar styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"names":["React","SceneView","DrawerLayout","ScreenContainer","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","DrawerView","PureComponent","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","drawerOpenProgress","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","getComponent","styles","pages","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","_setDrawerGestureRef","ref","current","getDerivedStateFromProps","nextProps","prevState","componentDidMount","Dimensions","addEventListener","componentDidUpdate","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","componentWillUnmount","removeEventListener","render","drawerLockMode","options","c","drawerBackgroundColor","keyboardDismissMode","useNativeAnimations","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","overlayColor","drawerContainerStyle","contentContainerStyle","defaultProps","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = drawerOpenProgress => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} drawerOpenProgress={drawerOpenProgress} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  _setDrawerGestureRef = ref => {\n    this.drawerGestureRef.current = ref;\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} onGestureRef={this._setDrawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={this.props.navigationConfig.drawerBackgroundColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} overlayColor={this.props.navigationConfig.overlayColor} drawerContainerStyle={this.props.navigationConfig.drawerContainerStyle} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"]},"metadata":{},"sourceType":"module"}