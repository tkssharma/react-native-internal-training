{"ast":null,"code":"var _jsxFileName = \"/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ScreenContainer } from 'react-native-screens';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nclass TabNavigationView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loaded: [this.props.navigation.state.index]\n    };\n\n    this._renderTabBar = () => {\n      var {\n        tabBarComponent: TabBarComponent = BottomTabBar,\n        tabBarOptions,\n        navigation,\n        screenProps,\n        getLabelText,\n        getAccessibilityLabel,\n        getButtonComponent,\n        getAccessibilityRole,\n        getAccessibilityStates,\n        getTestID,\n        renderIcon,\n        onTabPress,\n        onTabLongPress\n      } = this.props;\n      var {\n        descriptors\n      } = this.props;\n      var {\n        state\n      } = this.props.navigation;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        getLabelText: getLabelText,\n        getButtonComponent: getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessibilityRole: getAccessibilityRole,\n        getAccessibilityStates: getAccessibilityStates,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        }\n      }));\n    };\n\n    this._jumpTo = key => {\n      var {\n        navigation,\n        onIndexChange\n      } = this.props;\n      var index = navigation.state.routes.findIndex(route => route.key === key);\n      onIndexChange(index);\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      index\n    } = nextProps.navigation.state;\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  render() {\n    var {\n      navigation,\n      renderScene,\n      lazy\n    } = this.props;\n    var {\n      routes\n    } = navigation.state;\n    var {\n      loaded\n    } = this.state;\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      }\n    }, React.createElement(ScreenContainer, {\n      style: styles.pages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      }\n    }, routes.map((route, index) => {\n      if (lazy && !loaded.includes(index)) {\n        return null;\n      }\n\n      var isFocused = navigation.state.index === index;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        isVisible: isFocused,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        }\n      }, renderScene({\n        route\n      }));\n    })), this._renderTabBar());\n  }\n\n}\n\nTabNavigationView.defaultProps = {\n  lazy: true,\n  getAccessibilityRole: () => 'button',\n  getAccessibilityStates: (_ref) => {\n    var {\n      focused\n    } = _ref;\n    return focused ? ['selected'] : [];\n  }\n};\npolyfill(TabNavigationView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["/Users/srijan/react-native-internal-training/rn-native-app/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js"],"names":["React","polyfill","ScreenContainer","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","PureComponent","state","loaded","props","navigation","index","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getAccessibilityRole","getAccessibilityStates","getTestID","renderIcon","onTabPress","onTabLongPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","getDerivedStateFromProps","nextProps","prevState","includes","render","renderScene","lazy","styles","container","pages","map","isFocused","StyleSheet","absoluteFill","defaultProps","focused","create","flex","overflow"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  type InjectedProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar, { type TabBarOptions } from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\ntype Props = InjectedProps & {\n  getAccessibilityRole: (props: { route: any }) => string,\n  getAccessibilityStates: (props: { route: any }) => Array<string>,\n  lazy?: boolean,\n  tabBarComponent?: React.ComponentType<*>,\n  tabBarOptions?: TabBarOptions,\n};\n\ntype State = {\n  loaded: number[],\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: () => 'button',\n    getAccessibilityStates: ({ focused }) => (focused ? ['selected'] : []),\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator(TabNavigationView);\n"]},"metadata":{},"sourceType":"module"}