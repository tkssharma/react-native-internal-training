{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      _ref2$lazy = _ref2.lazy,\n      lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, props);\n  } : _ref2$drawerContent,\n      _ref2$drawerPosition = _ref2.drawerPosition,\n      drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n      _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n      keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n      _ref2$overlayColor = _ref2.overlayColor,\n      overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n      _ref2$drawerType = _ref2.drawerType,\n      drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n      _ref2$hideStatusBar = _ref2.hideStatusBar,\n      hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n      _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n      statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n      drawerContentOptions = _ref2.drawerContentOptions,\n      drawerStyle = _ref2.drawerStyle,\n      edgeWidth = _ref2.edgeWidth,\n      gestureHandlerProps = _ref2.gestureHandlerProps,\n      minSwipeDistance = _ref2.minSwipeDistance,\n      sceneContainerStyle = _ref2.sceneContainerStyle;\n\n  var _React$useState = React.useState([state.index]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var _React$useState3 = React.useState(function () {\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return getDefaultDrawerWidth({\n      height: height,\n      width: width\n    });\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      drawerWidth = _React$useState4[0],\n      setDrawerWidth = _React$useState4[1];\n\n  var drawerGestureRef = React.useRef(null);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = state.history.some(function (it) {\n    return it.type === 'drawer';\n  });\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread({}, DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread({}, DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n\n    return function () {\n      var _subscription;\n\n      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  React.useEffect(function () {\n    var updateWidth = function updateWidth(_ref3) {\n      var window = _ref3.window;\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n    return function () {\n      return Dimensions.removeEventListener('change', updateWidth);\n    };\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [state.index]));\n  }\n\n  var renderNavigationView = function renderNavigationView(_ref4) {\n    var progress = _ref4.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread({}, drawerContentOptions, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(index) && !isFocused) {\n        return null;\n      }\n\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused\n      }, descriptor.render());\n    }));\n  };\n\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n      gestureEnabled = _descriptors$activeKe.gestureEnabled,\n      swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerGestureContext.Provider, {\n    value: drawerGestureRef\n  }, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    onGestureRef: function onGestureRef(ref) {\n      drawerGestureRef.current = ref;\n    },\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: drawerWidth,\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerPostion: drawerPosition\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","lazy","drawerContent","props","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","sceneContainerStyle","React","state","height","Dimensions","drawerGestureRef","colors","useTheme","isDrawerOpen","it","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","type","subscription","updateWidth","window","setDrawerWidth","loaded","setLoaded","renderNavigationView","progress","descriptors","renderContent","styles","content","descriptor","route","unmountOnBlur","isFocused","StyleSheet","opacity","activeKey","swipeEnabled","ref","backgroundColor","background","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() => {\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return getDefaultDrawerWidth({ height, width });\n  });\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = state.history.some((it) => it.type === 'drawer');\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <GestureHandlerWrapper style={styles.content}>\n      <SafeAreaProviderCompat>\n        <DrawerGestureContext.Provider value={drawerGestureRef}>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              onGestureRef={(ref) => {\n                // @ts-ignore\n                drawerGestureRef.current = ref;\n              }}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                { width: drawerWidth, backgroundColor: colors.card },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              drawerPostion={drawerPosition}\n            />\n          </DrawerOpenContext.Provider>\n        </DrawerGestureContext.Provider>\n      </SafeAreaProviderCompat>\n    </GestureHandlerWrapper>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}