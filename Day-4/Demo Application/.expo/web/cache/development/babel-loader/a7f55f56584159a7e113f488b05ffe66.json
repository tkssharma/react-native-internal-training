{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from \"./TouchableItem\";\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      rest = _objectWithoutProperties(props, [\"icon\", \"label\", \"labelStyle\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\"]);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(TouchableItem, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: focused ? ['selected'] : []\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["colors","useTheme","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","onPress","borderRadius","StyleSheet","style","color","backgroundColor","iconNode","icon","size","styles","marginLeft","marginVertical","fontWeight","label","container","marginHorizontal","overflow","wrapper","flexDirection","alignItems","padding","marginRight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AASA,SAAA,QAAA,QAAA,0BAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,aAAA;AAsDA,eAAe,SAAA,UAAA,CAAA,KAAA,EAAkC;AAAA,kBAC5BC,QAAnB,EAD+C;AAAA,MACvCD,MADuC,aACvCA,MADuC;;AAAA,MAGzC,IAHyC,GAG/C,KAH+C,CAGzC,IAHyC;AAAA,MAGzC,KAHyC,GAG/C,KAH+C,CAGzC,KAHyC;AAAA,MAGzC,UAHyC,GAG/C,KAH+C,CAGzC,UAHyC;AAAA,uBAG/C,KAH+C,CAO7CE,OAP6C;AAAA,MAO7CA,OAP6C,+BAGzC,KAHyC;AAAA,8BAG/C,KAH+C,CAQ7CC,eAR6C;AAAA,MAQ7CA,eAR6C,sCAQ3BH,MAAM,CALpB,OAHyC;AAAA,8BAG/C,KAH+C,CAS7CI,iBAT6C;AAAA,MAS7CA,iBAT6C,sCASzBC,KAAK,CAACL,MAAM,CAAZK,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GANhB,MAMgBA,EATyB;AAAA,8BAG/C,KAH+C,CAU7CC,qBAV6C;AAAA,MAU7CA,qBAV6C,sCAUrBD,KAAK,CAALA,eAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAPpB,MAOoBA,EAVqB;AAAA,8BAG/C,KAH+C,CAW7CE,uBAX6C;AAAA,MAW7CA,uBAX6C,sCAGzC,aAHyC;AAAA,MAGzC,KAHyC,GAG/C,KAH+C,CAGzC,KAHyC;AAAA,MAa7CC,OAb6C,GAG/C,KAH+C,CAa7CA,OAb6C;AAAA,MAG/C,IAH+C,GAG/C,wBAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,OAAA,EAAA,YAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,uBAAA,EAAA,yBAAA,EAAA,OAAA,EAAA,SAAA,CAAA,CAH+C;;AAAA,4BAiBlBE,UAAU,CAAVA,OAAAA,CAAmBC,KAAK,IAArD,EAA6BD,CAjBkB;AAAA,kDAiBvCD,YAjBuC;AAAA,MAiBvCA,YAjBuC,sCAiBxB,CAjBwB;;AAkB/C,MAAMG,KAAK,GAAGV,OAAO,GAAA,eAAA,GAArB,iBAAA;AACA,MAAMW,eAAe,GAAGX,OAAO,GAAA,qBAAA,GAA/B,uBAAA;AAIA,MAAMY,QAAQ,GAAGC,IAAI,GAAGA,IAAI,CAAC;AAAEC,IAAAA,IAAI,EAAN,EAAA;AAAYd,IAAAA,OAAZ,EAAYA,OAAZ;AAAqBU,IAAAA,KAAAA,EAAAA;AAArB,GAAD,CAAP,GAArB,IAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,WAAW,EAAE;AADf,GAAA,EAAA,IAAA,EAAA;AAGE,IAAA,KAAK,EAAE,CAACK,MAAM,CAAP,SAAA,EAAmB;AAAER,MAAAA,YAAF,EAAEA,YAAF;AAAgBI,MAAAA,eAAAA,EAAAA;AAAhB,KAAnB,EAAA,KAAA;AAHT,GAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,IAAA,YAAY,EADd,CAAA;AAEE,IAAA,OAAO,EAFT,OAAA;AAGE,IAAA,KAAK,EAAE,CAACI,MAAM,CAAP,OAAA,EAAiB;AAAER,MAAAA,YAAAA,EAAAA;AAAF,KAAjB,CAHT;AAIE,IAAA,mBAAmB,EAAEP,OAAO,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GAJ9B,QAAA;AAKE,IAAA,0BAA0B,EAL5B,QAAA;AAME,IAAA,iBAAiB,EANnB,QAAA;AAOE,IAAA,mBAAmB,EAAEA,OAAO,GAAG,CAAH,UAAG,CAAH,GAAkB;AAPhD,GAAA,EASE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLe,MAAM,CADD,KAAA,EAEL;AAAEC,MAAAA,UAAU,EAAEJ,QAAQ,GAAA,EAAA,GAAtB,CAAA;AAAiCK,MAAAA,cAAc,EAAE;AAAjD,KAFK;AADT,GAAA,EAMG,OAAA,KAAA,KAAA,QAAA,GACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,aAAa,EADf,CAAA;AAEE,IAAA,KAAK,EAAE,CACL;AACEP,MAAAA,KADF,EACEA,KADF;AAEEQ,MAAAA,UAAU,EAAE;AAFd,KADK,EAAA,UAAA;AAFT,GAAA,EADD,KACC,CADD,GAcCC,KAAK,CAAC;AAAET,IAAAA,KAAF,EAAEA,KAAF;AAASV,IAAAA,OAAAA,EAAAA;AAAT,GAAD,CApBT,CAFF,CATF,CALF,CADF;AA4CD;AAED,IAAMe,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACTC,IAAAA,gBAAgB,EADP,EAAA;AAETJ,IAAAA,cAAc,EAFL,CAAA;AAGTK,IAAAA,QAAQ,EAAE;AAHD,GADoB;AAM/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EADN,KAAA;AAEPC,IAAAA,UAAU,EAFH,QAAA;AAGPC,IAAAA,OAAO,EAAE;AAHF,GANsB;AAW/BP,EAAAA,KAAK,EAAE;AACLQ,IAAAA,WAAW,EAAE;AADR;AAXwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <TouchableItem\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={focused ? ['selected'] : []}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </TouchableItem>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}