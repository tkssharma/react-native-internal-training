{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nvar UNINTIALIZED_STATE = {};\nexport default function useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  var _React$useState = React.useState(stateRef.current),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      trackingState = _React$useState2[0],\n      setTrackingState = _React$useState2[1];\n\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    setTrackingState(stateRef.current);\n  }, []);\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  var state = stateRef.current;\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"sources":["useSyncState.tsx"],"names":["UNINTIALIZED_STATE","stateRef","React","isSchedulingRef","initialState","getState","setState","state","setTrackingState","scheduleUpdate","callback","flushUpdates","trackingState"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,IAAMA,kBAAkB,GAAxB,EAAA;AAKA,eAAe,SAAA,YAAA,CAAA,YAAA,EAAuD;AACpE,MAAMC,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CAAjB,kBAAiBA,CAAjB;AACA,MAAMC,eAAe,GAAGD,KAAK,CAALA,MAAAA,CAAxB,KAAwBA,CAAxB;;AAEA,MAAID,QAAQ,CAARA,OAAAA,KAAJ,kBAAA,EAA6C;AAC3CA,IAAAA,QAAQ,CAARA,OAAAA,GAEE,OAAA,YAAA,KAAA,UAAA,GAAqCG,YAArC,EAAA,GAFFH,YAAAA;AAGD;;AARmE,wBAU1BC,KAAK,CAALA,QAAAA,CAAeD,QAAQ,CAAjE,OAA0CC,CAV0B;AAAA;AAAA,MAU9D,aAV8D;AAAA,MAU9D,gBAV8D;;AAYpE,MAAMG,QAAQ,GAAGH,KAAK,CAALA,WAAAA,CAAkB;AAAA,WAAMD,QAAQ,CAAhCC,OAAkB;AAAA,GAAlBA,EAAjB,EAAiBA,CAAjB;AAEA,MAAMI,QAAQ,GAAG,KAAK,CAAL,WAAA,CAAmBC,UAAAA,KAAD,EAAc;AAC/C,QAAIA,KAAK,KAAKN,QAAQ,CAAtB,OAAA,EAAgC;AAC9B;AACD;;AAEDA,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;;AAEA,QAAI,CAACE,eAAe,CAApB,OAAA,EAA8B;AAC5BK,MAAAA,gBAAgB,CAAhBA,KAAgB,CAAhBA;AACD;AATc,GAAA,EAAjB,EAAiB,CAAjB;AAYA,MAAMC,cAAc,GAAG,KAAK,CAAL,WAAA,CAAmBC,UAAAA,QAAD,EAA0B;AACjEP,IAAAA,eAAe,CAAfA,OAAAA,GAAAA,IAAAA;;AAEA,QAAI;AACFO,MAAAA,QAAQ;AADV,KAAA,SAEU;AACRP,MAAAA,eAAe,CAAfA,OAAAA,GAAAA,KAAAA;AACD;AAPoB,GAAA,EAAvB,EAAuB,CAAvB;AAUA,MAAMQ,YAAY,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAG3CH,IAAAA,gBAAgB,CAACP,QAAQ,CAAzBO,OAAgB,CAAhBA;AAHmB,GAAA,EApC+C,EAoC/C,CAArB;;AAQA,MAAII,aAAa,KAAKX,QAAQ,CAA9B,OAAA,EAAwC;AACtCO,IAAAA,gBAAgB,CAACP,QAAQ,CAAzBO,OAAgB,CAAhBA;AACD;;AAED,MAAMD,KAAK,GAAGN,QAAQ,CAAtB,OAAA;AAEA,SAAO,CAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA,cAAA,EAAP,YAAO,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-ignore\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"]},"metadata":{},"sourceType":"module"}