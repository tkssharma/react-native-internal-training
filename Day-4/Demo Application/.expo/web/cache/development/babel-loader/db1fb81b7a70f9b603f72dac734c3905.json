{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport queryString from 'query-string';\nexport default function getPathFromState(state) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (state === undefined) {\n    throw Error('NavigationState not passed');\n  }\n\n  var path = '/';\n  var current = state;\n\n  while (current) {\n    var index = typeof current.index === 'number' ? current.index : 0;\n    var route = current.routes[index];\n    var currentOptions = options;\n    var pattern = route.name;\n    var nestedRouteNames = '';\n\n    while (route.name in currentOptions) {\n      if (typeof currentOptions[route.name] === 'string') {\n        pattern = currentOptions[route.name];\n        break;\n      } else if (typeof currentOptions[route.name] === 'object') {\n        if (!currentOptions[route.name].screens) {\n          pattern = currentOptions[route.name].path;\n          nestedRouteNames = \"\".concat(nestedRouteNames, \"/\").concat(route.name);\n          break;\n        } else {\n          if (route.state === undefined) {\n            pattern = currentOptions[route.name].path;\n            nestedRouteNames = \"\".concat(nestedRouteNames, \"/\").concat(route.name);\n            break;\n          } else {\n            index = typeof route.state.index === 'number' ? route.state.index : 0;\n            var nextRoute = route.state.routes[index];\n            var deeperConfig = currentOptions[route.name].screens;\n\n            if (nextRoute.name in deeperConfig) {\n              nestedRouteNames = \"\".concat(nestedRouteNames, \"/\").concat(route.name);\n              route = nextRoute;\n              currentOptions = deeperConfig;\n            } else {\n              pattern = currentOptions[route.name].path;\n              nestedRouteNames = \"\".concat(nestedRouteNames, \"/\").concat(route.name);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.substring(1);\n    }\n\n    if (pattern !== '') {\n      (function () {\n        var config = currentOptions[route.name] !== undefined ? currentOptions[route.name].stringify : undefined;\n        var params = route.params ? Object.entries(route.params).reduce(function (acc, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n\n          acc[key] = (config === null || config === void 0 ? void 0 : config[key]) ? config[key](value) : String(value);\n          return acc;\n        }, {}) : undefined;\n\n        if (currentOptions[route.name] !== undefined) {\n          path += pattern.split('/').map(function (p) {\n            var name = p.replace(/^:/, '');\n\n            if (params && name in params && p.startsWith(':')) {\n              var value = params[name];\n              delete params[name];\n              return encodeURIComponent(value);\n            }\n\n            return encodeURIComponent(p);\n          }).join('/');\n        } else {\n          path += encodeURIComponent(route.name);\n        }\n\n        if (route.state) {\n          path += '/';\n        } else if (params) {\n          for (var param in params) {\n            if (params[param] === 'undefined') {\n              delete params[param];\n            }\n          }\n\n          var query = queryString.stringify(params);\n\n          if (query) {\n            path += \"?\".concat(query);\n          }\n        }\n      })();\n    }\n\n    current = route.state;\n  }\n\n  path = path !== '/' && path.slice(path.length - 1) === '/' ? path.slice(0, -1) : path;\n  return path;\n}","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["options","state","Error","path","current","index","route","currentOptions","pattern","nestedRouteNames","nextRoute","deeperConfig","config","params","Object","acc","String","p","name","value","encodeURIComponent","query","queryString"],"mappings":"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","sourcesContent":["import queryString from 'query-string';\nimport {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype Options = {\n  [routeName: string]:\n    | string\n    | {\n        path?: string;\n        stringify?: StringifyConfig;\n        screens?: Options;\n      };\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * Example:\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     Chat: {\n *       path: 'chat/:author/:id',\n *       stringify: { author: author => author.toLowerCase() }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(\n  state?: State,\n  options: Options = {}\n): string {\n  if (state === undefined) {\n    throw Error('NavigationState not passed');\n  }\n  let path = '/';\n\n  let current: State | undefined = state;\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n    let currentOptions = options;\n    let pattern = route.name;\n    // we keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = '';\n\n    while (route.name in currentOptions) {\n      if (typeof currentOptions[route.name] === 'string') {\n        pattern = currentOptions[route.name] as string;\n        break;\n      } else if (typeof currentOptions[route.name] === 'object') {\n        // if there is no `screens` property, we return pattern\n        if (\n          !(currentOptions[route.name] as {\n            screens: Options;\n          }).screens\n        ) {\n          pattern = (currentOptions[route.name] as { path: string }).path;\n          nestedRouteNames = `${nestedRouteNames}/${route.name}`;\n          break;\n        } else {\n          // if it is the end of state, we return pattern\n          if (route.state === undefined) {\n            pattern = (currentOptions[route.name] as { path: string }).path;\n            nestedRouteNames = `${nestedRouteNames}/${route.name}`;\n            break;\n          } else {\n            index =\n              typeof route.state.index === 'number' ? route.state.index : 0;\n            const nextRoute = route.state.routes[index];\n            const deeperConfig = (currentOptions[route.name] as {\n              screens: Options;\n            }).screens;\n            // if there is config for next route name, we go deeper\n            if (nextRoute.name in deeperConfig) {\n              nestedRouteNames = `${nestedRouteNames}/${route.name}`;\n              route = nextRoute as Route<string> & { state?: State };\n              currentOptions = deeperConfig;\n            } else {\n              // if not, there is no sense in going deeper in config\n              pattern = (currentOptions[route.name] as { path: string }).path;\n              nestedRouteNames = `${nestedRouteNames}/${route.name}`;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      // cut the first `/`\n      pattern = nestedRouteNames.substring(1);\n    }\n\n    // we don't add empty path strings to path\n    if (pattern !== '') {\n      const config =\n        currentOptions[route.name] !== undefined\n          ? (currentOptions[route.name] as { stringify?: StringifyConfig })\n              .stringify\n          : undefined;\n\n      const params = route.params\n        ? // Stringify all of the param values before we use them\n          Object.entries(route.params).reduce<{\n            [key: string]: string;\n          }>((acc, [key, value]) => {\n            acc[key] = config?.[key] ? config[key](value) : String(value);\n            return acc;\n          }, {})\n        : undefined;\n\n      if (currentOptions[route.name] !== undefined) {\n        path += pattern\n          .split('/')\n          .map((p) => {\n            const name = p.replace(/^:/, '');\n\n            // If the path has a pattern for a param, put the param in the path\n            if (params && name in params && p.startsWith(':')) {\n              const value = params[name];\n              // Remove the used value from the params object since we'll use the rest for query string\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete params[name];\n              return encodeURIComponent(value);\n            }\n\n            return encodeURIComponent(p);\n          })\n          .join('/');\n      } else {\n        path += encodeURIComponent(route.name);\n      }\n\n      if (route.state) {\n        path += '/';\n      } else if (params) {\n        for (let param in params) {\n          if (params[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete params[param];\n          }\n        }\n        const query = queryString.stringify(params);\n\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n    }\n\n    current = route.state;\n  }\n\n  path =\n    path !== '/' && path.slice(path.length - 1) === '/'\n      ? path.slice(0, -1)\n      : path;\n\n  return path;\n}\n"]},"metadata":{},"sourceType":"module"}